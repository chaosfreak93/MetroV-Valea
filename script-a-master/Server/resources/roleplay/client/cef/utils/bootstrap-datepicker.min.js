/*!
 * Datepicker for Bootstrap v1.4.1 (https://github.com/eternicode/bootstrap-datepicker)
 *
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */ !function(a, b) {
    function c() {
        return new Date(Date.UTC.apply(Date, arguments));
    }
    function d() {
        var a1 = new Date;
        return c(a1.getFullYear(), a1.getMonth(), a1.getDate());
    }
    function e(a1, b1) {
        return a1.getUTCFullYear() === b1.getUTCFullYear() && a1.getUTCMonth() === b1.getUTCMonth() && a1.getUTCDate() === b1.getUTCDate();
    }
    function f(a1) {
        return function() {
            return this[a1].apply(this, arguments);
        };
    }
    function g(b1, c1) {
        function d1(a1, b2) {
            return b2.toLowerCase();
        }
        var e1, f1 = a(b1).data(), g1 = {
        }, h = new RegExp("^" + c1.toLowerCase() + "([A-Z])");
        c1 = new RegExp("^" + c1.toLowerCase());
        for(var i in f1)c1.test(i) && (e1 = i.replace(h, d1), g1[e1] = f1[i]);
        return g1;
    }
    function h(b1) {
        var c1 = {
        };
        if (p[b1] || (b1 = b1.split("-")[0], p[b1])) {
            var d1 = p[b1];
            return a.each(o, function(a1, b2) {
                b2 in d1 && (c1[b2] = d1[b2]);
            }), c1;
        }
    }
    var i = function() {
        var b1 = {
            get: function(a1) {
                return this.slice(a1)[0];
            },
            contains: function(a1) {
                for(var b2 = a1 && a1.valueOf(), c1 = 0, d2 = this.length; d2 > c1; c1++)if (this[c1].valueOf() === b2) return c1;
                return -1;
            },
            remove: function(a1) {
                this.splice(a1, 1);
            },
            replace: function(b2) {
                b2 && (a.isArray(b2) || (b2 = [
                    b2
                ]), this.clear(), this.push.apply(this, b2));
            },
            clear: function() {
                this.length = 0;
            },
            copy: function() {
                var a1 = new i;
                return a1.replace(this), a1;
            }
        };
        return function() {
            var c1 = [];
            return c1.push.apply(c1, arguments), a.extend(c1, b1), c1;
        };
    }(), j = function(b1, c1) {
        this._process_options(c1), this.dates = new i, this.viewDate = this.o.defaultViewDate, this.focusDate = null, this.element = a(b1), this.isInline = !1, this.isInput = this.element.is("input"), this.component = this.element.hasClass("date") ? this.element.find(".add-on, .input-group-addon, .btn") : !1, this.hasInput = this.component && this.element.find("input").length, this.component && 0 === this.component.length && (this.component = !1), this.picker = a(q.template), this._buildEvents(), this._attachEvents(), this.isInline ? this.picker.addClass("datepicker-inline").appendTo(this.element) : this.picker.addClass("datepicker-dropdown dropdown-menu"), this.o.rtl && this.picker.addClass("datepicker-rtl"), this.viewMode = this.o.startView, this.o.calendarWeeks && this.picker.find("tfoot .today, tfoot .clear").attr("colspan", function(a1, b2) {
            return parseInt(b2) + 1;
        }), this._allow_update = !1, this.setStartDate(this._o.startDate), this.setEndDate(this._o.endDate), this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled), this.setDatesDisabled(this.o.datesDisabled), this.fillDow(), this.fillMonths(), this._allow_update = !0, this.update(), this.showMode(), this.isInline && this.show();
    };
    j.prototype = {
        constructor: j,
        _process_options: function(e1) {
            this._o = a.extend({
            }, this._o, e1);
            var f1 = this.o = a.extend({
            }, this._o), g1 = f1.language;
            switch(p[g1] || (g1 = g1.split("-")[0], p[g1] || (g1 = n.language)), f1.language = g1, f1.startView){
                case 2:
                case "decade":
                    f1.startView = 2;
                    break;
                case 1:
                case "year":
                    f1.startView = 1;
                    break;
                default:
                    f1.startView = 0;
            }
            switch(f1.minViewMode){
                case 1:
                case "months":
                    f1.minViewMode = 1;
                    break;
                case 2:
                case "years":
                    f1.minViewMode = 2;
                    break;
                default:
                    f1.minViewMode = 0;
            }
            f1.startView = Math.max(f1.startView, f1.minViewMode), f1.multidate !== !0 && (f1.multidate = Number(f1.multidate) || !1, f1.multidate !== !1 && (f1.multidate = Math.max(0, f1.multidate))), f1.multidateSeparator = String(f1.multidateSeparator), f1.weekStart %= 7, f1.weekEnd = (f1.weekStart + 6) % 7;
            var h1 = q.parseFormat(f1.format);
            if (f1.startDate !== -1 / 0 && (f1.startDate ? f1.startDate instanceof Date ? f1.startDate = this._local_to_utc(this._zero_time(f1.startDate)) : f1.startDate = q.parseDate(f1.startDate, h1, f1.language) : f1.startDate = -1 / 0), f1.endDate !== 1 / 0 && (f1.endDate ? f1.endDate instanceof Date ? f1.endDate = this._local_to_utc(this._zero_time(f1.endDate)) : f1.endDate = q.parseDate(f1.endDate, h1, f1.language) : f1.endDate = 1 / 0), f1.daysOfWeekDisabled = f1.daysOfWeekDisabled || [], a.isArray(f1.daysOfWeekDisabled) || (f1.daysOfWeekDisabled = f1.daysOfWeekDisabled.split(/[,\s]*/)), f1.daysOfWeekDisabled = a.map(f1.daysOfWeekDisabled, function(a1) {
                return parseInt(a1, 10);
            }), f1.datesDisabled = f1.datesDisabled || [], !a.isArray(f1.datesDisabled)) {
                var i1 = [];
                i1.push(q.parseDate(f1.datesDisabled, h1, f1.language)), f1.datesDisabled = i1;
            }
            f1.datesDisabled = a.map(f1.datesDisabled, function(a1) {
                return q.parseDate(a1, h1, f1.language);
            });
            var j1 = String(f1.orientation).toLowerCase().split(/\s+/g), k = f1.orientation.toLowerCase();
            if (j1 = a.grep(j1, function(a1) {
                return /^auto|left|right|top|bottom$/.test(a1);
            }), f1.orientation = {
                x: "auto",
                y: "auto"
            }, k && "auto" !== k) if (1 === j1.length) switch(j1[0]){
                case "top":
                case "bottom":
                    f1.orientation.y = j1[0];
                    break;
                case "left":
                case "right":
                    f1.orientation.x = j1[0];
            }
            else k = a.grep(j1, function(a1) {
                return /^left|right$/.test(a1);
            }), f1.orientation.x = k[0] || "auto", k = a.grep(j1, function(a1) {
                return /^top|bottom$/.test(a1);
            }), f1.orientation.y = k[0] || "auto";
            else ;
            if (f1.defaultViewDate) {
                var l = f1.defaultViewDate.year || (new Date).getFullYear(), m = f1.defaultViewDate.month || 0, o = f1.defaultViewDate.day || 1;
                f1.defaultViewDate = c(l, m, o);
            } else f1.defaultViewDate = d();
            f1.showOnFocus = f1.showOnFocus !== b ? f1.showOnFocus : !0;
        },
        _events: [],
        _secondaryEvents: [],
        _applyEvents: function(a1) {
            for(var c1, d2, e1, f1 = 0; f1 < a1.length; f1++)c1 = a1[f1][0], 2 === a1[f1].length ? (d2 = b, e1 = a1[f1][1]) : 3 === a1[f1].length && (d2 = a1[f1][1], e1 = a1[f1][2]), c1.on(e1, d2);
        },
        _unapplyEvents: function(a1) {
            for(var c1, d2, e1, f1 = 0; f1 < a1.length; f1++)c1 = a1[f1][0], 2 === a1[f1].length ? (e1 = b, d2 = a1[f1][1]) : 3 === a1[f1].length && (e1 = a1[f1][1], d2 = a1[f1][2]), c1.off(d2, e1);
        },
        _buildEvents: function() {
            var b1 = {
                keyup: a.proxy(function(b2) {
                    -1 === a.inArray(b2.keyCode, [
                        27,
                        37,
                        39,
                        38,
                        40,
                        32,
                        13,
                        9
                    ]) && this.update();
                }, this),
                keydown: a.proxy(this.keydown, this)
            };
            this.o.showOnFocus === !0 && (b1.focus = a.proxy(this.show, this)), this.isInput ? this._events = [
                [
                    this.element,
                    b1
                ]
            ] : this.component && this.hasInput ? this._events = [
                [
                    this.element.find("input"),
                    b1
                ],
                [
                    this.component,
                    {
                        click: a.proxy(this.show, this)
                    }
                ]
            ] : this.element.is("div") ? this.isInline = !0 : this._events = [
                [
                    this.element,
                    {
                        click: a.proxy(this.show, this)
                    }
                ]
            ], this._events.push([
                this.element,
                "*",
                {
                    blur: a.proxy(function(a1) {
                        this._focused_from = a1.target;
                    }, this)
                }
            ], [
                this.element,
                {
                    blur: a.proxy(function(a1) {
                        this._focused_from = a1.target;
                    }, this)
                }
            ]), this._secondaryEvents = [
                [
                    this.picker,
                    {
                        click: a.proxy(this.click, this)
                    }
                ],
                [
                    a(window),
                    {
                        resize: a.proxy(this.place, this)
                    }
                ],
                [
                    a(document),
                    {
                        "mousedown touchstart": a.proxy(function(a1) {
                            this.element.is(a1.target) || this.element.find(a1.target).length || this.picker.is(a1.target) || this.picker.find(a1.target).length || this.hide();
                        }, this)
                    }
                ]
            ];
        },
        _attachEvents: function() {
            this._detachEvents(), this._applyEvents(this._events);
        },
        _detachEvents: function() {
            this._unapplyEvents(this._events);
        },
        _attachSecondaryEvents: function() {
            this._detachSecondaryEvents(), this._applyEvents(this._secondaryEvents);
        },
        _detachSecondaryEvents: function() {
            this._unapplyEvents(this._secondaryEvents);
        },
        _trigger: function(b1, c1) {
            var d2 = c1 || this.dates.get(-1), e1 = this._utc_to_local(d2);
            this.element.trigger({
                type: b1,
                date: e1,
                dates: a.map(this.dates, this._utc_to_local),
                format: a.proxy(function(a1, b2) {
                    0 === arguments.length ? (a1 = this.dates.length - 1, b2 = this.o.format) : "string" == typeof a1 && (b2 = a1, a1 = this.dates.length - 1), b2 = b2 || this.o.format;
                    var c2 = this.dates.get(a1);
                    return q.formatDate(c2, b2, this.o.language);
                }, this)
            });
        },
        show: function() {
            return this.element.attr("readonly") && this.o.enableOnReadonly === !1 ? void 0 : (this.isInline || this.picker.appendTo(this.o.container), this.place(), this.picker.show(), this._attachSecondaryEvents(), this._trigger("show"), (window.navigator.msMaxTouchPoints || "ontouchstart" in document) && this.o.disableTouchKeyboard && a(this.element).blur(), this);
        },
        hide: function() {
            return this.isInline ? this : this.picker.is(":visible") ? (this.focusDate = null, this.picker.hide().detach(), this._detachSecondaryEvents(), this.viewMode = this.o.startView, this.showMode(), this.o.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find("input").val()) && this.setValue(), this._trigger("hide"), this) : this;
        },
        remove: function() {
            return this.hide(), this._detachEvents(), this._detachSecondaryEvents(), this.picker.remove(), delete this.element.data().datepicker, this.isInput || delete this.element.data().date, this;
        },
        _utc_to_local: function(a1) {
            return a1 && new Date(a1.getTime() + 60000 * a1.getTimezoneOffset());
        },
        _local_to_utc: function(a1) {
            return a1 && new Date(a1.getTime() - 60000 * a1.getTimezoneOffset());
        },
        _zero_time: function(a1) {
            return a1 && new Date(a1.getFullYear(), a1.getMonth(), a1.getDate());
        },
        _zero_utc_time: function(a1) {
            return a1 && new Date(Date.UTC(a1.getUTCFullYear(), a1.getUTCMonth(), a1.getUTCDate()));
        },
        getDates: function() {
            return a.map(this.dates, this._utc_to_local);
        },
        getUTCDates: function() {
            return a.map(this.dates, function(a1) {
                return new Date(a1);
            });
        },
        getDate: function() {
            return this._utc_to_local(this.getUTCDate());
        },
        getUTCDate: function() {
            var a1 = this.dates.get(-1);
            return "undefined" != typeof a1 ? new Date(a1) : null;
        },
        clearDates: function() {
            var a1;
            this.isInput ? a1 = this.element : this.component && (a1 = this.element.find("input")), a1 && a1.val("").change(), this.update(), this._trigger("changeDate"), this.o.autoclose && this.hide();
        },
        setDates: function() {
            var b1 = a.isArray(arguments[0]) ? arguments[0] : arguments;
            return this.update.apply(this, b1), this._trigger("changeDate"), this.setValue(), this;
        },
        setUTCDates: function() {
            var b1 = a.isArray(arguments[0]) ? arguments[0] : arguments;
            return this.update.apply(this, a.map(b1, this._utc_to_local)), this._trigger("changeDate"), this.setValue(), this;
        },
        setDate: f("setDates"),
        setUTCDate: f("setUTCDates"),
        setValue: function() {
            var a1 = this.getFormattedDate();
            return this.isInput ? this.element.val(a1).change() : this.component && this.element.find("input").val(a1).change(), this;
        },
        getFormattedDate: function(c1) {
            c1 === b && (c1 = this.o.format);
            var d2 = this.o.language;
            return a.map(this.dates, function(a1) {
                return q.formatDate(a1, c1, d2);
            }).join(this.o.multidateSeparator);
        },
        setStartDate: function(a1) {
            return this._process_options({
                startDate: a1
            }), this.update(), this.updateNavArrows(), this;
        },
        setEndDate: function(a1) {
            return this._process_options({
                endDate: a1
            }), this.update(), this.updateNavArrows(), this;
        },
        setDaysOfWeekDisabled: function(a1) {
            return this._process_options({
                daysOfWeekDisabled: a1
            }), this.update(), this.updateNavArrows(), this;
        },
        setDatesDisabled: function(a1) {
            this._process_options({
                datesDisabled: a1
            }), this.update(), this.updateNavArrows();
        },
        place: function() {
            if (this.isInline) return this;
            var b1 = this.picker.outerWidth(), c1 = this.picker.outerHeight(), d2 = 10, e1 = a(this.o.container).width(), f1 = a(this.o.container).height(), g1 = a(this.o.container).scrollTop(), h1 = a(this.o.container).offset(), i2 = [];
            this.element.parents().each(function() {
                var b2 = a(this).css("z-index");
                "auto" !== b2 && 0 !== b2 && i2.push(parseInt(b2));
            });
            var j1 = Math.max.apply(Math, i2) + 10, k = this.component ? this.component.parent().offset() : this.element.offset(), l = this.component ? this.component.outerHeight(!0) : this.element.outerHeight(!1), m = this.component ? this.component.outerWidth(!0) : this.element.outerWidth(!1), n = k.left - h1.left, o = k.top - h1.top;
            this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"), "auto" !== this.o.orientation.x ? (this.picker.addClass("datepicker-orient-" + this.o.orientation.x), "right" === this.o.orientation.x && (n -= b1 - m)) : k.left < 0 ? (this.picker.addClass("datepicker-orient-left"), n -= k.left - d2) : n + b1 > e1 ? (this.picker.addClass("datepicker-orient-right"), n = k.left + m - b1) : this.picker.addClass("datepicker-orient-left");
            var p, q, r = this.o.orientation.y;
            if ("auto" === r && (p = -g1 + o - c1, q = g1 + f1 - (o + l + c1), r = Math.max(p, q) === q ? "top" : "bottom"), this.picker.addClass("datepicker-orient-" + r), "top" === r ? o += l : o -= c1 + parseInt(this.picker.css("padding-top")), this.o.rtl) {
                var s = e1 - (n + m);
                this.picker.css({
                    top: o,
                    right: s,
                    zIndex: j1
                });
            } else this.picker.css({
                top: o,
                left: n,
                zIndex: j1
            });
            return this;
        },
        _allow_update: !0,
        update: function() {
            if (!this._allow_update) return this;
            var b1 = this.dates.copy(), c1 = [], d2 = !1;
            return arguments.length ? (a.each(arguments, a.proxy(function(a1, b2) {
                b2 instanceof Date && (b2 = this._local_to_utc(b2)), c1.push(b2);
            }, this)), d2 = !0) : (c1 = this.isInput ? this.element.val() : this.element.data("date") || this.element.find("input").val(), c1 = c1 && this.o.multidate ? c1.split(this.o.multidateSeparator) : [
                c1
            ], delete this.element.data().date), c1 = a.map(c1, a.proxy(function(a1) {
                return q.parseDate(a1, this.o.format, this.o.language);
            }, this)), c1 = a.grep(c1, a.proxy(function(a1) {
                return a1 < this.o.startDate || a1 > this.o.endDate || !a1;
            }, this), !0), this.dates.replace(c1), this.dates.length ? this.viewDate = new Date(this.dates.get(-1)) : this.viewDate < this.o.startDate ? this.viewDate = new Date(this.o.startDate) : this.viewDate > this.o.endDate && (this.viewDate = new Date(this.o.endDate)), d2 ? this.setValue() : c1.length && String(b1) !== String(this.dates) && this._trigger("changeDate"), !this.dates.length && b1.length && this._trigger("clearDate"), this.fill(), this;
        },
        fillDow: function() {
            var a1 = this.o.weekStart, b1 = "<tr>";
            if (this.o.calendarWeeks) {
                this.picker.find(".datepicker-days thead tr:first-child .datepicker-switch").attr("colspan", function(a2, b2) {
                    return parseInt(b2) + 1;
                });
                var c1 = '<th class="cw">&#160;</th>';
                b1 += c1;
            }
            for(; a1 < this.o.weekStart + 7;)b1 += '<th class="dow">' + p[this.o.language].daysMin[(a1++) % 7] + "</th>";
            b1 += "</tr>", this.picker.find(".datepicker-days thead").append(b1);
        },
        fillMonths: function() {
            for(var a1 = "", b1 = 0; 12 > b1;)a1 += '<span class="month">' + p[this.o.language].monthsShort[b1++] + "</span>";
            this.picker.find(".datepicker-months td").html(a1);
        },
        setRange: function(b1) {
            b1 && b1.length ? this.range = a.map(b1, function(a1) {
                return a1.valueOf();
            }) : delete this.range, this.fill();
        },
        getClassNames: function(b1) {
            var c2 = [], d2 = this.viewDate.getUTCFullYear(), f1 = this.viewDate.getUTCMonth(), g1 = new Date;
            return b1.getUTCFullYear() < d2 || b1.getUTCFullYear() === d2 && b1.getUTCMonth() < f1 ? c2.push("old") : (b1.getUTCFullYear() > d2 || b1.getUTCFullYear() === d2 && b1.getUTCMonth() > f1) && c2.push("new"), this.focusDate && b1.valueOf() === this.focusDate.valueOf() && c2.push("focused"), this.o.todayHighlight && b1.getUTCFullYear() === g1.getFullYear() && b1.getUTCMonth() === g1.getMonth() && b1.getUTCDate() === g1.getDate() && c2.push("today"), -1 !== this.dates.contains(b1) && c2.push("active"), (b1.valueOf() < this.o.startDate || b1.valueOf() > this.o.endDate || -1 !== a.inArray(b1.getUTCDay(), this.o.daysOfWeekDisabled)) && c2.push("disabled"), this.o.datesDisabled.length > 0 && a.grep(this.o.datesDisabled, function(a1) {
                return e(b1, a1);
            }).length > 0 && c2.push("disabled", "disabled-date"), this.range && (b1 > this.range[0] && b1 < this.range[this.range.length - 1] && c2.push("range"), -1 !== a.inArray(b1.valueOf(), this.range) && c2.push("selected")), c2;
        },
        fill: function() {
            var d2, e1 = new Date(this.viewDate), f1 = e1.getUTCFullYear(), g1 = e1.getUTCMonth(), h1 = this.o.startDate !== -1 / 0 ? this.o.startDate.getUTCFullYear() : -1 / 0, i2 = this.o.startDate !== -1 / 0 ? this.o.startDate.getUTCMonth() : -1 / 0, j1 = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCFullYear() : 1 / 0, k = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCMonth() : 1 / 0, l = p[this.o.language].today || p.en.today || "", m = p[this.o.language].clear || p.en.clear || "";
            if (!isNaN(f1) && !isNaN(g1)) {
                this.picker.find(".datepicker-days thead .datepicker-switch").text(p[this.o.language].months[g1] + " " + f1), this.picker.find("tfoot .today").text(l).toggle(this.o.todayBtn !== !1), this.picker.find("tfoot .clear").text(m).toggle(this.o.clearBtn !== !1), this.updateNavArrows(), this.fillMonths();
                var n = c(f1, g1 - 1, 28), o = q.getDaysInMonth(n.getUTCFullYear(), n.getUTCMonth());
                n.setUTCDate(o), n.setUTCDate(o - (n.getUTCDay() - this.o.weekStart + 7) % 7);
                var r = new Date(n);
                r.setUTCDate(r.getUTCDate() + 42), r = r.valueOf();
                for(var s, t = []; n.valueOf() < r;){
                    if (n.getUTCDay() === this.o.weekStart && (t.push("<tr>"), this.o.calendarWeeks)) {
                        var u = new Date(+n + (this.o.weekStart - n.getUTCDay() - 7) % 7 * 86400000), v = new Date(Number(u) + (11 - u.getUTCDay()) % 7 * 86400000), w = new Date(Number(w = c(v.getUTCFullYear(), 0, 1)) + (11 - w.getUTCDay()) % 7 * 86400000), x = (v - w) / 86400000 / 7 + 1;
                        t.push('<td class="cw">' + x + "</td>");
                    }
                    if (s = this.getClassNames(n), s.push("day"), this.o.beforeShowDay !== a.noop) {
                        var y = this.o.beforeShowDay(this._utc_to_local(n));
                        y === b ? y = {
                        } : "boolean" == typeof y ? y = {
                            enabled: y
                        } : "string" == typeof y && (y = {
                            classes: y
                        }), y.enabled === !1 && s.push("disabled"), y.classes && (s = s.concat(y.classes.split(/\s+/))), y.tooltip && (d2 = y.tooltip);
                    }
                    s = a.unique(s), t.push('<td class="' + s.join(" ") + '"' + (d2 ? ' title="' + d2 + '"' : "") + ">" + n.getUTCDate() + "</td>"), d2 = null, n.getUTCDay() === this.o.weekEnd && t.push("</tr>"), n.setUTCDate(n.getUTCDate() + 1);
                }
                this.picker.find(".datepicker-days tbody").empty().append(t.join(""));
                var z = this.picker.find(".datepicker-months").find("th:eq(1)").text(f1).end().find("span").removeClass("active");
                if (a.each(this.dates, function(a1, b1) {
                    b1.getUTCFullYear() === f1 && z.eq(b1.getUTCMonth()).addClass("active");
                }), (h1 > f1 || f1 > j1) && z.addClass("disabled"), f1 === h1 && z.slice(0, i2).addClass("disabled"), f1 === j1 && z.slice(k + 1).addClass("disabled"), this.o.beforeShowMonth !== a.noop) {
                    var A = this;
                    a.each(z, function(b1, c2) {
                        if (!a(c2).hasClass("disabled")) {
                            var d3 = new Date(f1, b1, 1), e2 = A.o.beforeShowMonth(d3);
                            e2 === !1 && a(c2).addClass("disabled");
                        }
                    });
                }
                t = "", f1 = 10 * parseInt(f1 / 10, 10);
                var B = this.picker.find(".datepicker-years").find("th:eq(1)").text(f1 + "-" + (f1 + 9)).end().find("td");
                f1 -= 1;
                for(var C, D = a.map(this.dates, function(a1) {
                    return a1.getUTCFullYear();
                }), E = -1; 11 > E; E++)C = [
                    "year"
                ], -1 === E ? C.push("old") : 10 === E && C.push("new"), -1 !== a.inArray(f1, D) && C.push("active"), (h1 > f1 || f1 > j1) && C.push("disabled"), t += '<span class="' + C.join(" ") + '">' + f1 + "</span>", f1 += 1;
                B.html(t);
            }
        },
        updateNavArrows: function() {
            if (this._allow_update) {
                var a1 = new Date(this.viewDate), b1 = a1.getUTCFullYear(), c2 = a1.getUTCMonth();
                switch(this.viewMode){
                    case 0:
                        this.o.startDate !== -1 / 0 && b1 <= this.o.startDate.getUTCFullYear() && c2 <= this.o.startDate.getUTCMonth() ? this.picker.find(".prev").css({
                            visibility: "hidden"
                        }) : this.picker.find(".prev").css({
                            visibility: "visible"
                        }), this.o.endDate !== 1 / 0 && b1 >= this.o.endDate.getUTCFullYear() && c2 >= this.o.endDate.getUTCMonth() ? this.picker.find(".next").css({
                            visibility: "hidden"
                        }) : this.picker.find(".next").css({
                            visibility: "visible"
                        });
                        break;
                    case 1:
                    case 2:
                        this.o.startDate !== -1 / 0 && b1 <= this.o.startDate.getUTCFullYear() ? this.picker.find(".prev").css({
                            visibility: "hidden"
                        }) : this.picker.find(".prev").css({
                            visibility: "visible"
                        }), this.o.endDate !== 1 / 0 && b1 >= this.o.endDate.getUTCFullYear() ? this.picker.find(".next").css({
                            visibility: "hidden"
                        }) : this.picker.find(".next").css({
                            visibility: "visible"
                        });
                }
            }
        },
        click: function(b2) {
            b2.preventDefault();
            var d2, e1, f1, g1 = a(b2.target).closest("span, td, th");
            if (1 === g1.length) switch(g1[0].nodeName.toLowerCase()){
                case "th":
                    switch(g1[0].className){
                        case "datepicker-switch":
                            this.showMode(1);
                            break;
                        case "prev":
                        case "next":
                            var h1 = q.modes[this.viewMode].navStep * ("prev" === g1[0].className ? -1 : 1);
                            switch(this.viewMode){
                                case 0:
                                    this.viewDate = this.moveMonth(this.viewDate, h1), this._trigger("changeMonth", this.viewDate);
                                    break;
                                case 1:
                                case 2:
                                    this.viewDate = this.moveYear(this.viewDate, h1), 1 === this.viewMode && this._trigger("changeYear", this.viewDate);
                            }
                            this.fill();
                            break;
                        case "today":
                            var i2 = new Date;
                            i2 = c(i2.getFullYear(), i2.getMonth(), i2.getDate(), 0, 0, 0), this.showMode(-2);
                            var j1 = "linked" === this.o.todayBtn ? null : "view";
                            this._setDate(i2, j1);
                            break;
                        case "clear":
                            this.clearDates();
                    }
                    break;
                case "span":
                    g1.hasClass("disabled") || (this.viewDate.setUTCDate(1), g1.hasClass("month") ? (f1 = 1, e1 = g1.parent().find("span").index(g1), d2 = this.viewDate.getUTCFullYear(), this.viewDate.setUTCMonth(e1), this._trigger("changeMonth", this.viewDate), 1 === this.o.minViewMode && this._setDate(c(d2, e1, f1))) : (f1 = 1, e1 = 0, d2 = parseInt(g1.text(), 10) || 0, this.viewDate.setUTCFullYear(d2), this._trigger("changeYear", this.viewDate), 2 === this.o.minViewMode && this._setDate(c(d2, e1, f1))), this.showMode(-1), this.fill());
                    break;
                case "td":
                    g1.hasClass("day") && !g1.hasClass("disabled") && (f1 = parseInt(g1.text(), 10) || 1, d2 = this.viewDate.getUTCFullYear(), e1 = this.viewDate.getUTCMonth(), g1.hasClass("old") ? 0 === e1 ? (e1 = 11, d2 -= 1) : e1 -= 1 : g1.hasClass("new") && (11 === e1 ? (e1 = 0, d2 += 1) : e1 += 1), this._setDate(c(d2, e1, f1)));
            }
            this.picker.is(":visible") && this._focused_from && a(this._focused_from).focus(), delete this._focused_from;
        },
        _toggle_multidate: function(a2) {
            var b2 = this.dates.contains(a2);
            if (a2 || this.dates.clear(), -1 !== b2 ? (this.o.multidate === !0 || this.o.multidate > 1 || this.o.toggleActive) && this.dates.remove(b2) : this.o.multidate === !1 ? (this.dates.clear(), this.dates.push(a2)) : this.dates.push(a2), "number" == typeof this.o.multidate) for(; this.dates.length > this.o.multidate;)this.dates.remove(0);
        },
        _setDate: function(a2, b2) {
            b2 && "date" !== b2 || this._toggle_multidate(a2 && new Date(a2)), b2 && "view" !== b2 || (this.viewDate = a2 && new Date(a2)), this.fill(), this.setValue(), b2 && "view" === b2 || this._trigger("changeDate");
            var c3;
            this.isInput ? c3 = this.element : this.component && (c3 = this.element.find("input")), c3 && c3.change(), !this.o.autoclose || b2 && "date" !== b2 || this.hide();
        },
        moveMonth: function(a2, c3) {
            if (!a2) return b;
            if (!c3) return a2;
            var d2, e1, f1 = new Date(a2.valueOf()), g1 = f1.getUTCDate(), h1 = f1.getUTCMonth(), i2 = Math.abs(c3);
            if (c3 = c3 > 0 ? 1 : -1, 1 === i2) e1 = -1 === c3 ? function() {
                return f1.getUTCMonth() === h1;
            } : function() {
                return f1.getUTCMonth() !== d2;
            }, d2 = h1 + c3, f1.setUTCMonth(d2), (0 > d2 || d2 > 11) && (d2 = (d2 + 12) % 12);
            else {
                for(var j1 = 0; i2 > j1; j1++)f1 = this.moveMonth(f1, c3);
                d2 = f1.getUTCMonth(), f1.setUTCDate(g1), e1 = function() {
                    return d2 !== f1.getUTCMonth();
                };
            }
            for(; e1();)f1.setUTCDate(--g1), f1.setUTCMonth(d2);
            return f1;
        },
        moveYear: function(a2, b2) {
            return this.moveMonth(a2, 12 * b2);
        },
        dateWithinRange: function(a2) {
            return a2 >= this.o.startDate && a2 <= this.o.endDate;
        },
        keydown: function(a2) {
            if (!this.picker.is(":visible")) return void (27 === a2.keyCode && this.show());
            var b2, c3, e1, f1 = !1, g1 = this.focusDate || this.viewDate;
            switch(a2.keyCode){
                case 27:
                    this.focusDate ? (this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill()) : this.hide(), a2.preventDefault();
                    break;
                case 37:
                case 39:
                    if (!this.o.keyboardNavigation) break;
                    b2 = 37 === a2.keyCode ? -1 : 1, a2.ctrlKey ? (c3 = this.moveYear(this.dates.get(-1) || d(), b2), e1 = this.moveYear(g1, b2), this._trigger("changeYear", this.viewDate)) : a2.shiftKey ? (c3 = this.moveMonth(this.dates.get(-1) || d(), b2), e1 = this.moveMonth(g1, b2), this._trigger("changeMonth", this.viewDate)) : (c3 = new Date(this.dates.get(-1) || d()), c3.setUTCDate(c3.getUTCDate() + b2), e1 = new Date(g1), e1.setUTCDate(g1.getUTCDate() + b2)), this.dateWithinRange(e1) && (this.focusDate = this.viewDate = e1, this.setValue(), this.fill(), a2.preventDefault());
                    break;
                case 38:
                case 40:
                    if (!this.o.keyboardNavigation) break;
                    b2 = 38 === a2.keyCode ? -1 : 1, a2.ctrlKey ? (c3 = this.moveYear(this.dates.get(-1) || d(), b2), e1 = this.moveYear(g1, b2), this._trigger("changeYear", this.viewDate)) : a2.shiftKey ? (c3 = this.moveMonth(this.dates.get(-1) || d(), b2), e1 = this.moveMonth(g1, b2), this._trigger("changeMonth", this.viewDate)) : (c3 = new Date(this.dates.get(-1) || d()), c3.setUTCDate(c3.getUTCDate() + 7 * b2), e1 = new Date(g1), e1.setUTCDate(g1.getUTCDate() + 7 * b2)), this.dateWithinRange(e1) && (this.focusDate = this.viewDate = e1, this.setValue(), this.fill(), a2.preventDefault());
                    break;
                case 32:
                    break;
                case 13:
                    g1 = this.focusDate || this.dates.get(-1) || this.viewDate, this.o.keyboardNavigation && (this._toggle_multidate(g1), f1 = !0), this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.setValue(), this.fill(), this.picker.is(":visible") && (a2.preventDefault(), "function" == typeof a2.stopPropagation ? a2.stopPropagation() : a2.cancelBubble = !0, this.o.autoclose && this.hide());
                    break;
                case 9:
                    this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill(), this.hide();
            }
            if (f1) {
                this.dates.length ? this._trigger("changeDate") : this._trigger("clearDate");
                var h1;
                this.isInput ? h1 = this.element : this.component && (h1 = this.element.find("input")), h1 && h1.change();
            }
        },
        showMode: function(a2) {
            a2 && (this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + a2))), this.picker.children("div").hide().filter(".datepicker-" + q.modes[this.viewMode].clsName).css("display", "block"), this.updateNavArrows();
        }
    };
    var k1 = function(b2, c3) {
        this.element = a(b2), this.inputs = a.map(c3.inputs, function(a2) {
            return a2.jquery ? a2[0] : a2;
        }), delete c3.inputs, m2.call(a(this.inputs), c3).bind("changeDate", a.proxy(this.dateUpdated, this)), this.pickers = a.map(this.inputs, function(b3) {
            return a(b3).data("datepicker");
        }), this.updateDates();
    };
    k1.prototype = {
        updateDates: function() {
            this.dates = a.map(this.pickers, function(a2) {
                return a2.getUTCDate();
            }), this.updateRanges();
        },
        updateRanges: function() {
            var b2 = a.map(this.dates, function(a2) {
                return a2.valueOf();
            });
            a.each(this.pickers, function(a2, c3) {
                c3.setRange(b2);
            });
        },
        dateUpdated: function(b2) {
            if (!this.updating) {
                this.updating = !0;
                var c3 = a(b2.target).data("datepicker"), d2 = c3.getUTCDate(), e1 = a.inArray(b2.target, this.inputs), f1 = e1 - 1, g1 = e1 + 1, h2 = this.inputs.length;
                if (-1 !== e1) {
                    if (a.each(this.pickers, function(a2, b3) {
                        b3.getUTCDate() || b3.setUTCDate(d2);
                    }), d2 < this.dates[f1]) for(; f1 >= 0 && d2 < this.dates[f1];)this.pickers[f1--].setUTCDate(d2);
                    else if (d2 > this.dates[g1]) for(; h2 > g1 && d2 > this.dates[g1];)this.pickers[g1++].setUTCDate(d2);
                    this.updateDates(), delete this.updating;
                }
            }
        },
        remove: function() {
            a.map(this.pickers, function(a2) {
                a2.remove();
            }), delete this.element.data().datepicker;
        }
    };
    var l = a.fn.datepicker, m2 = function(c4) {
        var d4 = Array.apply(null, arguments);
        d4.shift();
        var e3;
        return this.each(function() {
            var f2 = a(this), i2 = f2.data("datepicker"), l1 = "object" == typeof c4 && c4;
            if (!i2) {
                var m1 = g(this, "date"), o = a.extend({
                }, n, m1, l1), p = h(o.language), q = a.extend({
                }, n, p, m1, l1);
                if (f2.hasClass("input-daterange") || q.inputs) {
                    var r = {
                        inputs: q.inputs || f2.find("input").toArray()
                    };
                    f2.data("datepicker", i2 = new k1(this, a.extend(q, r)));
                } else f2.data("datepicker", i2 = new j(this, q));
            }
            return "string" == typeof c4 && "function" == typeof i2[c4] && (e3 = i2[c4].apply(i2, d4), e3 !== b) ? !1 : void 0;
        }), e3 !== b ? e3 : this;
    };
    a.fn.datepicker = m2;
    var n = a.fn.datepicker.defaults = {
        autoclose: !1,
        beforeShowDay: a.noop,
        beforeShowMonth: a.noop,
        calendarWeeks: !1,
        clearBtn: !1,
        toggleActive: !1,
        daysOfWeekDisabled: [],
        datesDisabled: [],
        endDate: 1 / 0,
        forceParse: !0,
        format: "mm/dd/yyyy",
        keyboardNavigation: !0,
        language: "en",
        minViewMode: 0,
        multidate: !1,
        multidateSeparator: ",",
        orientation: "auto",
        rtl: !1,
        startDate: -1 / 0,
        startView: 0,
        todayBtn: !1,
        todayHighlight: !1,
        weekStart: 0,
        disableTouchKeyboard: !1,
        enableOnReadonly: !0,
        container: "body"
    }, o = a.fn.datepicker.locale_opts = [
        "format",
        "rtl",
        "weekStart"
    ];
    a.fn.datepicker.Constructor = j;
    var p = a.fn.datepicker.dates = {
        en: {
            days: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
            ],
            daysShort: [
                "Sun",
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat",
                "Sun"
            ],
            daysMin: [
                "Su",
                "Mo",
                "Tu",
                "We",
                "Th",
                "Fr",
                "Sa",
                "Su"
            ],
            months: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
            ],
            monthsShort: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec"
            ],
            today: "Today",
            clear: "Clear"
        }
    }, q = {
        modes: [
            {
                clsName: "days",
                navFnc: "Month",
                navStep: 1
            },
            {
                clsName: "months",
                navFnc: "FullYear",
                navStep: 1
            },
            {
                clsName: "years",
                navFnc: "FullYear",
                navStep: 10
            }
        ],
        isLeapYear: function(a2) {
            return a2 % 4 === 0 && a2 % 100 !== 0 || a2 % 400 === 0;
        },
        getDaysInMonth: function(a2, b2) {
            return [
                31,
                q.isLeapYear(a2) ? 29 : 28,
                31,
                30,
                31,
                30,
                31,
                31,
                30,
                31,
                30,
                31
            ][b2];
        },
        validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
        nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
        parseFormat: function(a2) {
            var b2 = a2.replace(this.validParts, "\x00").split("\x00"), c4 = a2.match(this.validParts);
            if (!b2 || !b2.length || !c4 || 0 === c4.length) throw new Error("Invalid date format.");
            return {
                separators: b2,
                parts: c4
            };
        },
        parseDate: function(d4, e3, f2) {
            function g2() {
                var a2 = this.slice(0, m3[k2].length), b2 = m3[k2].slice(0, a2.length);
                return a2.toLowerCase() === b2.toLowerCase();
            }
            if (!d4) return b;
            if (d4 instanceof Date) return d4;
            "string" == typeof e3 && (e3 = q.parseFormat(e3));
            var h3, i2, k2, l1 = /([\-+]\d+)([dmwy])/, m3 = d4.match(/([\-+]\d+)([dmwy])/g);
            if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(d4)) {
                for(d4 = new Date, k2 = 0; k2 < m3.length; k2++)switch(h3 = l1.exec(m3[k2]), i2 = parseInt(h3[1]), h3[2]){
                    case "d":
                        d4.setUTCDate(d4.getUTCDate() + i2);
                        break;
                    case "m":
                        d4 = j.prototype.moveMonth.call(j.prototype, d4, i2);
                        break;
                    case "w":
                        d4.setUTCDate(d4.getUTCDate() + 7 * i2);
                        break;
                    case "y":
                        d4 = j.prototype.moveYear.call(j.prototype, d4, i2);
                }
                return c(d4.getUTCFullYear(), d4.getUTCMonth(), d4.getUTCDate(), 0, 0, 0);
            }
            m3 = d4 && d4.match(this.nonpunctuation) || [], d4 = new Date;
            var n1, o1, r = {
            }, s = [
                "yyyy",
                "yy",
                "M",
                "MM",
                "m",
                "mm",
                "d",
                "dd"
            ], t = {
                yyyy: function(a2, b2) {
                    return a2.setUTCFullYear(b2);
                },
                yy: function(a2, b2) {
                    return a2.setUTCFullYear(2000 + b2);
                },
                m: function(a2, b2) {
                    if (isNaN(a2)) return a2;
                    for(b2 -= 1; 0 > b2;)b2 += 12;
                    for(b2 %= 12, a2.setUTCMonth(b2); a2.getUTCMonth() !== b2;)a2.setUTCDate(a2.getUTCDate() - 1);
                    return a2;
                },
                d: function(a2, b2) {
                    return a2.setUTCDate(b2);
                }
            };
            t.M = t.MM = t.mm = t.m, t.dd = t.d, d4 = c(d4.getFullYear(), d4.getMonth(), d4.getDate(), 0, 0, 0);
            var u = e3.parts.slice();
            if (m3.length !== u.length && (u = a(u).filter(function(b2, c4) {
                return -1 !== a.inArray(c4, s);
            }).toArray()), m3.length === u.length) {
                var v;
                for(k2 = 0, v = u.length; v > k2; k2++){
                    if (n1 = parseInt(m3[k2], 10), h3 = u[k2], isNaN(n1)) switch(h3){
                        case "MM":
                            o1 = a(p[f2].months).filter(g2), n1 = a.inArray(o1[0], p[f2].months) + 1;
                            break;
                        case "M":
                            o1 = a(p[f2].monthsShort).filter(g2), n1 = a.inArray(o1[0], p[f2].monthsShort) + 1;
                    }
                    r[h3] = n1;
                }
                var w, x;
                for(k2 = 0; k2 < s.length; k2++)x = s[k2], x in r && !isNaN(r[x]) && (w = new Date(d4), t[x](w, r[x]), isNaN(w) || (d4 = w));
            }
            return d4;
        },
        formatDate: function(b2, c4, d4) {
            if (!b2) return "";
            "string" == typeof c4 && (c4 = q.parseFormat(c4));
            var e3 = {
                d: b2.getUTCDate(),
                D: p[d4].daysShort[b2.getUTCDay()],
                DD: p[d4].days[b2.getUTCDay()],
                m: b2.getUTCMonth() + 1,
                M: p[d4].monthsShort[b2.getUTCMonth()],
                MM: p[d4].months[b2.getUTCMonth()],
                yy: b2.getUTCFullYear().toString().substring(2),
                yyyy: b2.getUTCFullYear()
            };
            e3.dd = (e3.d < 10 ? "0" : "") + e3.d, e3.mm = (e3.m < 10 ? "0" : "") + e3.m, b2 = [];
            for(var f2 = a.extend([], c4.separators), g2 = 0, h3 = c4.parts.length; h3 >= g2; g2++)f2.length && b2.push(f2.shift()), b2.push(e3[c4.parts[g2]]);
            return b2.join("");
        },
        headTemplate: '<thead><tr><th class="prev">&#171;</th><th colspan="5" class="datepicker-switch"></th><th class="next">&#187;</th></tr></thead>',
        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
        footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
    };
    q.template = '<div class="datepicker"><div class="datepicker-days"><table class=" table-condensed">' + q.headTemplate + "<tbody></tbody>" + q.footTemplate + '</table></div><div class="datepicker-months"><table class="table-condensed">' + q.headTemplate + q.contTemplate + q.footTemplate + '</table></div><div class="datepicker-years"><table class="table-condensed">' + q.headTemplate + q.contTemplate + q.footTemplate + "</table></div></div>", a.fn.datepicker.DPGlobal = q, a.fn.datepicker.noConflict = function() {
        return a.fn.datepicker = l, this;
    }, a.fn.datepicker.version = "1.4.1", a(document).on("focus.datepicker.data-api click.datepicker.data-api", '[data-provide="datepicker"]', function(b2) {
        var c4 = a(this);
        c4.data("datepicker") || (b2.preventDefault(), m2.call(c4, "show"));
    }), a(function() {
        m2.call(a('[data-provide="datepicker-inline"]'));
    });
}(window.jQuery);
